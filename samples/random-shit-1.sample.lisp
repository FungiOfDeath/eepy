
(labels ((factorial (n) (factorial-iter n 1))
         (factorial-iter (n accum)
           (if (> n 0)
               (factorial-iter (- n 1) (* n accum))
               accum))
         (fibonacci (n)
           (labels ((iter (k a b)
                     (if (= k n) a
                         (iter (+ k 1) b (+ a b)))))
             (iter 0 0 1)))
         (make-counter (state)
           (lambda ()
             (let* ((saved state))
               (set! state (+ 1 saved))
               saved))))
  (let* ((k 1))
    (let* ((k (+ k 1))
           (k (+ k 2)))
      (+ k 3))
    k)
  (letrec* ((k 1))
    (letrec* ((a (compose b factorial))
              (b (compose a fibonacci)))
      a b)
    k)
  (letrec* ((a 1)
            (b (letrec* ((c a))
                 (letrec* ((d (b c)))
                   (letrec* ()
                     (block
                       (letrec* ((k a))
                         (lambda (b) k b))))))))
    (+ a 2))
  (let* ((a 1)
         (b (let* ((c a))
              (let* ((d (a c)))
                (let* ()
                  (block
                    (let* ((k a))
                      (lambda (b) k b))))))))
    (+ a 2))
  (letrec* ((a (compose b +))
            (b (lambda (n)
                 (if (> n 100)
                     n
                     (a n 10)))))
    (a 10 12))
  (letrec* ((a fun)
            (b (compose a +))
            (fun (lambda (n)
                   (if (> n 100)
                       n
                       (b n 10)))))
    (a 10 12))
  (letrec* ((f (lambda (x) (set! f x) x)))
    (f +)
    (f 1 2))
  (if (= 1 1) 1 2)
  (print (factorial 10))
  (print (fibonacci 10))
  ())
